<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="o.jruby" default="netbeans" basedir=".">
    <description>Builds, tests, and runs the project o.jruby</description>
    <import file="nbproject/build-impl.xml"/>

    <target name="jruby.init">
        <uptodate property="jruby.build.uptodate" targetfile="${cluster}/${module.jar}">
            <srcfiles dir="${src.dir}" includes="**/*"/>
            <srcfiles dir="patched_files" includes="**/*"/>
        </uptodate>
    </target>

    <target name="init" depends="harness.init,jruby.init" unless="jruby.build.uptodate">
        <unzip dest="${patched_source}">
            <fileset dir="external/">
                <include name="jruby-src-${jruby_src_version}.zip"/>
            </fileset>
        </unzip>

        <!-- Not all packages are needed -->
        <delete dir="${src.dir}/org/jruby/ant"/>
        <delete dir="${src.dir}/org/jruby/cext"/>
        <delete dir="${src.dir}/org/jruby/compiler/ir"/>
        <delete dir="${src.dir}/org/jruby/embed/bsf"/>
        <delete dir="${src.dir}/org/jruby/embed/osgi"/>
        <delete dir="${src.dir}/org/jruby/ext/ffi"/>
        <delete dir="${src.dir}/org/jruby/interpreter"/>
        <delete file="${src.dir}/org/jruby/internal/runtime/methods/InterpretedIRMethod.java"/>
        <delete dir="${src.dir}/org/jruby/javasupport/bsf"/>
        <delete file="${src.dir}/org/jruby/runtime/InterpretedIRBlockBody.java"/>
        <delete file="${src.dir}/org/jruby/runtime/load/CExtension.java"/>
        <delete file="${src.dir}/org/jruby/runtime/scope/SharedBindingDynamicScope.java"/>
        <delete file="${src.dir}/org/jruby/util/NailMain.java"/>

        <!-- Repackage the sources as org.jruby.nb such that we have no class name
             conflicts if people try to have JRuby as a scripting engine -->
        <move file="${src.dir}/org/jruby" tofile="${src.dir}/org/nb"/>
        <mkdir dir="${src.dir}/org/jruby"/>
        <move file="${src.dir}/org/nb" tofile="${src.dir}/org/jruby/nb"/>
        <replace dir="${patched_source}">
            <include name="**"/>
            <exclude name="**/*.jar"/>
            <replacefilter token="org.jruby" value="org.jruby.nb"/>
            <replacefilter token="org-jruby" value="org-jruby-nb"/>
            <replacefilter token="org/jruby" value="org/jruby/nb"/>

            <replacefilter token="org.jruby.nb.util.ByteList" value="org.jruby.util.ByteList"/>
            <replacefilter token="org.jruby.nb.ext.posix" value="org.jruby.ext.posix"/>
        </replace>
        <replace dir="${src.dir}/org/jruby/nb/util">
            <include name="*.java"/>
            <!-- No imports in the same package (no longer same package) -->
            <replacefilter token=" ByteList" value=" org.jruby.util.ByteList"/>
            <replacefilter token="(ByteList" value="(org.jruby.util.ByteList"/>
            <!--<replacefilter token="<ByteList" value="<org.jruby.util.ByteList"/>-->
        </replace>
        <replace dir="${src.dir}/org/jruby/nb/util">
            <include name="*.java"/>
            <!-- No imports in the same package (no longer same package) -->
            <replacetoken><![CDATA[<ByteList]]></replacetoken>
            <replacevalue><![CDATA[<org.jruby.util.ByteList]]></replacevalue>
        </replace>

        <!-- Insert module description bundle etc. -->
        <copy todir="${src.dir}" overwrite="true">
            <fileset dir="src" />
        </copy>
        
        <echo>Patching ${src.dir}</echo>
        <copy todir="${src.dir}" overwrite="true">
            <fileset dir="patched_files" />
        </copy>
    </target>

    <target name="release" depends="init">
        <mkdir dir="${cluster}/modules/ext"/>
        <copy todir="${cluster}/modules/ext">
            <fileset dir="${libs.dir}">
                <include name="asm*.jar"/>
                <include name="bytelist*.jar"/>
                <include name="constantine*.jar"/>
                <include name="jaffl*.jar"/>
                <include name="jcodings*.jar"/>
                <include name="jffi*.jar"/>
                <include name="joni*.jar"/>
                <include name="jna-posix*.jar"/>
                <include name="joda*.jar"/>
                <include name="jline*.jar"/>
                <include name="jnr*.jar"/>
                <include name="jsr292-mock*.jar"/>
                <include name="dynalang*.jar"/>
                <include name="snakeyaml*.jar"/>
                <include name="yydebug*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="clean" depends="projectized-common.clean">
        <delete dir="${patched_source}"/>
        <!-- HACK: For some reason the clean target doesn't get expansions for the logical dirs... -->
        <delete dir="patched_source"/>
    </target>

    <target name="check-run-mlbuild" depends="build-init">
        <property name="translated.src.dir" location="${nb_all}/translatedfiles/src/${module.name}/src"/>
        <available file="${translated.src.dir}" type="dir" property="translated.src.dir.exist"/>
        <condition property="run.ml.build" value="true">
            <and>
                <isset property="translated.src.dir.exist"/>
                <isset property="locjar.locales"/>
                <length string="${locjar.locales}" when="greater" length="0"/>
            </and>
        </condition>
    </target>

    <target name="pre-jar-ml" depends="build-init,check-run-mlbuild" if="run.ml.build">
        <mkdir dir="${build.classes.dir.ml}"/>
        <copy todir="${build.classes.dir.ml}">
            <!-- #58298: strip comments to save some space -->
            <fileset dir="${translated.src.dir}" includes="**/*.properties"/>
            <filterchain>
                <tokenfilter>
                    <!-- #61965: preserve #NOI18N and similar comments -->
                    <filetokenizer/>
                    <replaceregex pattern="^#(?!(PART)?(NO)?I18N).*[\r\n]+" replace="" flags="gm"/>
                </tokenfilter>
            </filterchain>
        </copy>
    </target>

</project>
