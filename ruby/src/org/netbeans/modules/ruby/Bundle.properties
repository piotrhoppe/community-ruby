OpenIDE-Module-Display-Category=Ruby
OpenIDE-Module-Name=Ruby Editing
Services/MIMEResolver/jruby.xml=Ruby Files
text/x-ruby=Ruby
text/x-ruby-string-double=Ruby Quoted Strings
text/x-ruby-string-single=Ruby Strings
text/x-ruby-comment=Ruby Comments

ruby-reflow-paragraph=Reformat Paragraph
editor-popup-ruby-reflow-paragraph=Reformat Paragraph

NoRename=Cannot rename this symbol; only parameters, local and dynamic variables are allowed
NoRenameWithErrors=Cannot rename when source contains errors
UnexpectedError=Syntax error, unexpected {0}
OptionsCategory_Name=Ruby
OptionsCategory_Title=Ruby
UnsafeIdentifierName=Only a-z, A-Z, digits and underscore are safe in Ruby names

## TEMPORARY -- this should be removed soon
# because the colors should be added dynamically from the infrastructure
GSF_ERROR=Error
GSF_CLASS=Class Variable
GSF_REGEXP_LITERAL=Regular Expression
GSF_LINE_COMMENT=Line Comment
GSF_CONSTANT=Constant
GSF_INT_LITERAL=Number
GSF_IDENTIFIER=Identifier
GSF_ANY_KEYWORD=Keyword
GSF_WHITESPACE=Whitespace
GSF_FLOAT_LITERAL=Floating point number
GSF_ANY_OPERATOR=Operator
GSF_INSTANCE=Instance
STRING_INVALID=Invalid String
GSF_GLOBAL=Global Variable
GSF_TODO=Todo Item
GSF_STRING_LITERAL=String
GSF_DOUBLE_LITERAL=Double
GSF_BLOCK_COMMENT=Block Comment
STRING_TEXT=String
QUOTED_STRING_LITERAL=Quoted String
GSF_LONG_LITERAL=Long
STRING_ESCAPE=String Escape
GSF_CHAR_LITERAL=Character Literal
GSF_DOCUMENTATION=Documentation
COMMENT_TEXT=Comment Text
COMMENT_TODO=Comment TODO Text
COMMENT_RDOC=RDoc Comment Tag
COMMENT_HTMLTAG=Comment HTML Tag
COMMENT_LINK=Comment Link
COMMENT_BOLD=Bold Comment
COMMENT_ITALIC=Italic Comment
GSF_TYPESYMBOL=Type Symbol
REGEXP_TEXT=Regular Expression
REGEXP_META=Regular Expression Metachar
REGEXP_INVALID=Invalid Regular Expression

#"Semantic" highlighting:
mod-unused=Unused Element
mod-abstract=Abstract Element
mod-field=Field
mod-local-variable=Local Variable
mod-parameter=Parameter
mod-method=Method
mod-constructor=Constructor
mod-class=Class
mod-interface=Interface
mod-annotation-type=Annotation
mod-enum=Enum
mod-deprecated=Deprecated Element
mod-static=Static Member
mod-private=Private Member
mod-package-private=Package Private Member
mod-protected=Protected Member
mod-public=Public Member
mod-type-parameter-declaration=Type Parameter
mod-type-parameter-use=Type Parameter Use
mod-undefined=Undefined Element

mark-occurrences=Mark Occurrences

# Localization of snippets
# Mime Type text/x-ruby
ct_l==&gt;
ct_jc=import Java class
ct_doc=do { |e| .. }
ct_module=module end
ct_begin=begin rescue end
ct_if=if \u2026 end
ct_ife=if \u2026\u0080\u00a6 else \u2026\u0080\u00a6 end
# Textmate snippets
ct_colon=Hash Pair \u2026\u0080\u0094 :key =&gt; "value"
ct_defs=def self .. end
ct_rpc=render (partial, collection)
ct_vc=validates_confirmation_of
ct_inject=inject object
ct_ea=each { |e| .. }
ct_sorb=sort_by { |e| .. }
ct_clafn=class_from_name()
ct_ve=validates_exclusion_of
ct_col=collect { |e| .. }
ct_rceca=render_component (controller, action)
ct_ra=render (action)
ct_rf=render (file)
ct_asko=assert_kind_of(..)
ct_eas-=each_slice(..) { |group| .. }
ct_rtl=render (text, layout)
ct_asrt=assert_respond_to(..)
ct_as=assert(..)
ct_forin=for \u2026\u0080\u00a6 in \u2026\u0080\u00a6 end
ct_rb=#!/usr/bin/env ruby -wKU
ct_ts=require "tc_.." ..
ct_habtm=has_and_belongs_to_many
ct_Yd-=YAML.dump(.., file)
ct_sel=select { |e| .. }
ct_eap=each_pair { |name, val| .. }
ct_zip=zip(enums) { |row| .. }
ct_usai=usage_if()
ct_mod=module .. ClassMethods .. end
ct_vl=validates_length_of
ct_mccc=Create Several Columns
ct_vaif=validates_associated if
ct_w=attr_writer ..
ct_mtab=Create Table
ct_rcea=render_component (action)
ct_ril=render (inline, locals)
ct_flash=flash[\u2026\u0080\u00a6]
ct_unless=unless \u2026\u0080\u00a6 end
ct_rej=reject { |e| .. }
ct_ass=assert_same(..)
ct_asid=assert_in_delta(..)
ct_gre=grep(/pattern/) { |match| .. }
ct_deli=delete_if { |e| .. }
ct_ran=randomize()
ct_asnt=assert_nothing_thrown { .. }
ct_Enum=include Enumerable ..
ct_vuif=validates_uniqueness_of if
ct_rn=render (nothing)
ct_asio=assert_instance_of(..)
ct_asns=assert_not_same(..)
ct_asnn=assert_not_nil(..)
ct_case=case \u2026\u0080\u00a6 end
ct_collect=collect element
ct_app=application_code { .. }
ct_recai=redirect_to (controller, action, id)
ct_asnm=assert_no_match(..)
ct_Forw-=extend Forwardable
ct_fina=find_all { |e| .. }
ct_defds=def_delegators ..
ct_ri=render (inline)
ct_sca=scan(/../) { |match| .. }
ct_min=min { |a, b| .. }
ct_dee=deep_copy(..)
ct_eac-=each_char { |chr| .. }
ct_rdb=RAILS_DEFAULT_LOGGER.debug
ct_r=attr_reader ..
ct_vpif=validates_presence_of if
ct_sor=sort { |a, b| .. }
ct_rl=render (layout)
ct_File=File.foreach ("..") { |line| .. }
ct_vp=validates_presence_of
ct_rcec=render_component (controller)
ct_defd=def_delegator ..
ct_Dir=Dir.glob("..") { |file| .. }
ct_req=require ".."
ct_rfu=render (file, use_full_path)
ct_verify=verify \u2026\u0080\u0094 render
ct_art=assert_redirected_to
ct_aso=assert_operator(..)
ct_cl=classify { |e| .. }
ct_eav=each_value { |val| .. }
ct_rps=render (partial, status)
ct_tc=class .. &lt; Test::Unit::TestCase .. end
ct_asn=assert_nil(..)
ct_usau=usage_unless()
ct_Comp=include Comparable ..
ct_each=each element
ct_vu=validates_uniqueness_of
ct_uni=unix_filter { .. }
ct_all=all? { |e| .. }
ct_rit=render (inline, type)
ct_doo=Insert do |object| \u2026\u0080\u00a6 end
ct_par=partition { |e| .. }
ct_eak=each_key { |key| .. }
ct_rw=attr_accessor ..
ct_flao=flatten_once()
ct_Ml=Marshal.load(obj)
ct_eawi=each_with_index { |e, i| .. }
ct_ast=assert_throws(..) { .. }
ct_deft=def test_ .. end
ct_mm=def method_missing .. end
ct_class=class \u2026\u0080\u00a6 end
ct_asm=assert_match(..)
ct_eal=each_line { |line| .. }
ct_asnr=assert_nothing_raised(..) { .. }
ct_select=select element
ct_va=validates_associated
ct_reject=reject element
ct_rt=render (text)
ct_rtlt=render (text, layout =&gt; true)
ct_reca=redirect_to (controller, action)
ct_do=do \u2026\u0080\u00a6 end
ct_veif=validates_exclusion_of if
ct_map=map { |e| .. }
ct_am=alias_method ..
ct_any=any? { |e| .. }
ct_reai=redirect_to (action, id)
ct_Hash=Hash.new { |hash, key| hash[key] = .. }
ct_cla=class .. &lt; Struct .. initialize .. end
ct_Yl-=YAML.load(file)
ct_when=when \u2026\u0080\u00a6
ct_ral=render (action, layout)
ct_def=def \u2026\u0080\u00a6 end
ct_eai=each_index { |i| .. }
ct_vcif=validates_confirmation_of if
ct_asr=assert_raise(..) { .. }
ct_max=max { |a, b| .. }
ct_rpl=render (partial, locals)
ct_rp=render (partial)
ct_reve=reverse_each { |e| .. }
ct_hm=has_many
ct_Md=Marshal.dump(.., file)
ct_rns=render (nothing, status)
ct_rea=redirect_to (action)
ct_fin=find { |e| .. }
ct_ho=has_one
ct_asre=assert_response
ct_mcol=Add Column
ct_each_with_index=each_with_index
ct_rec=redirect_to (controller)
ct_rpo=render (partial, object)
ct_fl=flunk(..)
ct_mapwi-=map_with_index { |e, i| .. }
ct_asne=assert_not_equal(..)
ct_eab=each_byte { |byte| .. }
ct_bt=belongs_to
ct_det=detect { |e| .. }
ct_rts=render (text, status)
